(function (angular) {
  'use strict';

  var app = angular.module('AFE', ['ngRoute', 'ngResource', 'ui.bootstrap']);

  // Intercept server sent errors, potentially rejecting auth errors
  function AuthInjector($rootScope, $q, $location, Session) {
    return {

      // called on server error
      responseError : function (response) {

        // if the server sends back a 403 "Not Authorized",
        // and the code is ERR_NO_SESSION, we have had a session timeout
        // on the server.  Redirect to login
        if (response.status === 403 && response.data.code === "ERR_NO_SESSION") {
          console.log('[AUTH] No session found!');
          Session.destroy();
          $location.url('/login');
        }

        return $q.reject(response);
      }
    };
  }

  // ensure that the user is properly connected
  app.factory('AuthenticationInjectorFactory', ['$rootScope', '$q', '$location', 'Session', AuthInjector]);

  // configure routes
  function configRoutes($routeProvider) {
    $routeProvider
    .when('/', {
      controller : 'MainController as MainCtrl',
      templateUrl : 'modules/main/main.html'
    })
    .when('/login', {
      controller : 'LoginController as LoginCtrl',
      templateUrl : 'modules/login/login.html'
    })
    .when('/dashboard', {
      controller : 'DashboardController as DashboardCtrl',
      templateUrl : 'modules/dashboard/dashboard.html'
    })
    .when('/requests/create', {
      controller : 'RequestCreateController as CreateCtrl',
      templateUrl : 'modules/requests/create.html'
    })
    .when('/requests/:id', {
      controller : 'RequestReviewController as ReviewCtrl',
      templateUrl : 'modules/requests/review.html'
    })
    .when('/users/:userid', {
      controller : 'UserController as UserCtrl',
      templateUrl : 'modules/users/users.html'
    })
    .when('/users/:id/profile', {
      controller : 'UserProfileController as ProfileCtrl',
      templateUrl : 'modules/users/profile.html'
    })
    .when('/users/account/recovery', {
      controller : 'RecoveryController as RecoveryCtrl',
      templateUrl: 'modules/users/recovery/recovery.html'
    })
    .when('/projects', {
      controller : 'ProjectController as ProjectCtrl',
      templateUrl : 'modules/projects/project.html'
    })
    .otherwise('/login');
  }

  function configAuth($httpProvider) {
    $httpProvider.interceptors.push(['$injector', function ($injector) {
      return $injector.get('AuthenticationInjectorFactory');
    }
  ]);

  }

  function run($rootScope, $location, Session) {

    function contains(array, value) { return array.indexOf(value) !== -1; }

    // make sure that the user is authenticated
    $rootScope.$on('$routeChangeStart', function (event, next) {
      var publicRoutes = ['/users/account/recovery', '/users/account/reset', '/login'],
          route = next.originalPath;

      // NOTE - cannot have a user with id === 0
      if (!Session.id && !contains(publicRoutes, route)) {
        console.log('Redirecting to public /login', route);
        $location.url('/login');
      }

      if (!!Session.id && route === '/login') {
        console.log('Blocking attempt at accessing login page.');
        $location.url('/');
      }
    });
  }

  // configure and run
  app.config(['$httpProvider', configAuth]);
  app.config(['$routeProvider', configRoutes]);
  app.run(['$rootScope', '$location', 'Session', run]);

})(angular);

(function () {

  'use strict';

  var app = angular.module('AFE');


  app.service('DashboardService', ['$http', function ($http) {

    // get the projects
    this.getProjects = function () {
      return $http.get('/projects');
    };

    // get all PRFs
    this.getRequests = function () {
      return $http.get('/requests');
    };

    // get a specific PRF by it's ID
    this.getRequestById = function (id) {
      return $http.get('/request/' + id);
    };

    // this is a server-sent events stream
    this.getRequestStream = function () {
      // SSE
    };

  }]);

  app.controller('DashboardController', ['DashboardService', '$interval', function (dashService) {

  }]);

})();

(function (angular) {
  'use strict';

  var app = angular.module('AFE');

  // Managing a session like this is an elegant way to
  // ensure a session exists
  app.service('Session', ['$window', function ($window) {

    var self = this;

    // session persist in the browser's session storage
    var storage = $window.sessionStorage,
        key = 'afe-storage';

    // create a new session
    self.create       = function (data) {
      self.id         = data.id;
      self.role       = data.role;
      self.email      = data.email;
      self.lastactive = new Date(data.lastactive);
      self.username   = data.username;
      storage.setItem(key, JSON.stringify(data));
    };

    // destroy the current session
    self.destroy      = function () {
      self.id         = null;
      self.role       = null;
      self.email      = null;
      self.lastactive = null;
      self.username   = null;
      storage.setItem(key, '{}');
    };

    // loads a session from memory
    self.load = function () {
      try {
        var payload = JSON.parse(storage.getItem(key));
        if (!payload) { return; }
        else { self.create(payload); }
      } catch (e) {}
    };

    // load an old session if it exists
    self.load();
  }]);


  app.factory('AuthService', ['$http', 'Session', function ($http, Session) {
    var service = {};

    // log the user in
    service.login = function (credentials) {
      return $http
        .post('/login', { username : credentials.username, password : credentials.password })
        .then(function (res) {
          Session.create(res.data);
          return res.data;
        });
    };

    // log the user out
    service.logout = function () {
      Session.destroy();
      return $http.get('/logout');
    };

    return service;
  }]);


  app.controller('LoginController', ['$location', 'AuthService', function ($location, AuthService) {
    var self = this;

    self.credentials = {};
    self.error = false;

    self.login = function (credentials) {
      self.error = false;
      AuthService.login(credentials)
      .then(function () {
        $location.url('/');
      })
      .catch(function () {
        self.error = true;
      });
    };

  }]);

  app.controller('ApplicationController', ['$scope', function ($scope) {
    $scope.currentUser = null;
    
    $scope.setCurrentUser = function (user) {
      $scope.currentUser = user;
    };
  }]);

})(angular);

(function (angular) {
  'use strict';

  angular.module('AFE')

  .controller('MainController', function (Session) {
    var self = this;

    self.user = Session;

  });

})(angular);

angular.module('AFE')

.controller('NavigationController', ['AuthService', 'Session', '$location', function (AuthService, Session, $location) {
  this.isLoggedIn = function () {
    return Session.id;
  };

  this.user = Session;

  this.logout = function () {
    console.log('clicked logout');
    AuthService.logout()
    .then(function () {
      $location.url('/login');
    });
  };
}]);


angular.module('AFE')
.service('ProjectService', ['$resource', ProjectService])
.service('ColorService', ['$resource', ColorService])
.controller('ProjectController', ['$window', 'ProjectService', 'ColorService', ProjectController]);

// Loads available colors for projects
function ColorService($resource) {
  var vm = this;

  vm.datasource = $resource('/colors/:id');
  vm.reload = load;

  // refresh the dataset
  function load() {
    vm.colors = vm.datasource.query();
  }

  // automatically load data
  load();

  return vm;
}

// controls CRUD on projects
function ProjectService($resource) {
  var vm = this;

  // the REST datasource
  vm.datasource = $resource('/projects/:id', { id : '@id' }, { 'update' : { 'method' : 'PUT' }});
  vm.reload = load;

  // get a new form
  vm.new = function () { return new vm.datasource(); };

  // CRUD operatins
  vm.add = add;
  vm.remove = remove;
  vm.edit = edit;

  /* ------------------------------------------------------------------------ */

  // refresh the dataset
  function load() {
    vm.projects = vm.datasource.query();
  }

  // add a new project, updating the project collection
  // when the function completes
  function add(project) {
    return project.$save(function (data) {

      // push the new project onto the stack
      vm.projects.push(data);
    });
  }

  // edit an existing project
  function edit(project) {
    return project.$update(project);
  }

  // delete a project
  function remove(project) {
    var promise = project.$remove(function () {

      // get the index of the removed project
      var idx = vm.projects.indexOf(project);
      console.log('Removing:', idx);
      vm.projects.splice(idx, 1);
    });
    
    return promise.$promise;
  }

  // automatically load data
  load();

  return vm;
}


// View-Model for the project page.
function ProjectController($window, ProjectService, ColorService) {
  var vm = this;

  // bind the datasets
  vm.projects = ProjectService.projects;
  vm.colors = ColorService.colors;

  // bind tab controls
  vm.active = 1;
  vm.goTo = goTo;

  // bind functions
  vm.print = $window.print;
  vm.selectColor = selectColor;

  // edit/add/remove projects
  vm.initAdd = initAdd;
  vm.saveAdd = saveAdd;
  vm.initEdit = initEdit;
  vm.saveEdit = saveEdit;
  vm.removeProject = removeProject;

  /* ------------------------------------------------------------------------ */

  // navigate to tab by id, setting it as active
  function goTo(id) {
    vm.active = id;
  }

  // select a color for the slave project
  function selectColor(color) {
    vm.slave.colorname = color.name;
    vm.slave.color = color.code;
  }

  // initialize the add form
  function initAdd() {
    vm.slave = new ProjectService.datasource();
    vm.goTo(2);
  }

  // save the new form
  function saveAdd(invalid, project) {
    if (invalid) { return; }
    ProjectService.add(project)
    .then(function () {
      vm.goTo(1); 
    });
  }

  // initialize project editing
  function initEdit(project) {

    // go to the editting mode on this project
    vm.slave = project;

    console.log(project);

    // get the color name
    vm.colors.forEach(function (color) {
      if (project.color === color.code) {
        project.colorname = color.name;
      }
    });

    // go to the editting tab
    vm.goTo(3);
  }

  // save the editted project
  function saveEdit(invalid, project) {
    if (invalid) { return; }
    ProjectService.edit(project)
    .then(function () {
      vm.goTo(1); 
    });
  }

  // delete a project
  function removeProject(project) {
    ProjectService.remove(project);
  }
}

(function (angular) {
  'use strict';

  angular.module('AFE')
  .controller('RequestCreateController', ['$http', '$location', 'Session', function ($http, $location, Session) {

    var self = this,
        isDef = angular.isDefined;

    self.slave = {
      details : [{}, {}],
      date : new Date()
    };

    // load projects
    $http.get('/projects')
    .success(function (data) {
      self.projects = data;
      console.log('project', data);
    })
    .error(console.error);

    // pretty formatting for the projects dropdown
    this.fmtProjects = function (project) {
      return project ? project.id + ' - ' + project.code : '';
    };

    self.user = Session;

    // TODO/FIXME This validation has many holes
    // ideally, I'd like to inform the user which rows on the
    //
    // submits the form to the server, after validation checks
    this.submit = function (slave) {

      if (validateRows(slave.details)) {

        // remove row error (redo this, please using self.errors = {};)
        delete slave.rowerror;

        // we need to get the user id
        slave.userid = self.user.id;

        $http.post('/requests', slave)
        .then(function (response) {

          // on successful submission, go the view mode
          $location.url('/requests/' + response.data.requestid);
        })
        .catch(console.error);
      } else {

        // TODO standardize error reporting
        slave.rowerror = true;
      }
    };

    // validation for table rows
    function validateRows(rows) {
      return rows.every(function (row) {
        return isDef(row.item) &&
          isDef(row.budgetcode) &&
          isDef(row.quantity) &&
          isDef(row.unit) &&
          isDef(row.unitprice);
      });
    }

    // adds a row to the requestdetail line
    this.addRow = function () {
      this.slave.details.push({});
    };

    // removes the row at idx from the requestdetails table
    this.removeRow = function (idx) {
      self.slave.details.splice(idx, 1);
    };

    // calculates totats for the requestdetails table
    this.totalRows = function () {
      self.total = self.slave.details.reduce(function (a, row) {
        if (!row.quantity || !row.unitprice) { return a; }
        return a + (row.quantity * row.unitprice);
      }, 0);
    };

  }]);

})(angular);

(function (angular) {
  'use strict';

  angular.module('AFE')
  .controller('RequestReviewController', ['$http', '$routeParams', function ($http, $routeParams) {

    var self =  this;
    self.id = $routeParams.id;

    console.log('self.id', self.id);

    // TODO
    // load the user by id
    // load the project by name

    // load the correct request for display
    $http.get('/requests/' + self.id)
    .then(function (response) {

      // the response has at least one row.  We can retrieve the metadata
      // from the first row and then display the details in the second.
      self.meta = response.data[0];
      self.data = response.data;

      self.totals = response.data.reduce(function (agg, row) {
        agg.items += row.quantity;
        agg.prices += (row.quantity * row.unitprice);
        return agg;
      }, { items : 0, prices : 0 });

    })
    .catch(function (err) {
      console.error(err);
    });

  }]);
})(angular);


angular.module('AFE')

/* UserProfileController
 *
 * This controler is responsible for updating the user's
 * profile information.  A user profile contains a cached
 * copy of user preferences.
 *
 */
.controller('UserProfileController', ['$http', '$routeParams', function ($http, $routeParams) {
  var self = this,
    userId = $routeParams.userid;

  // load up the user 
  $http.get('/users/' + id)
  .then(function (response) {
    self.user = response.data; 
  })
  .catch(function (error) {
    console.error(error);
  });

}]);


angular.module('AFE')
.controller('RecoveryController', ['$http', function ($http) {

  // alias this
  var self = this;

  self.error = false;
  self.success = false;
  
  // submit to the server
  self.submit = function () {
    self.success = false;
    self.error = false;

    $http.post('/users/accountrecovery', { email : self.email })
    .then(function () {
      self.success = true;
    })
    .catch(function () {
      self.error = true;
    });
  };

}]);


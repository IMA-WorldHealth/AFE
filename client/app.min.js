var app = angular.module('AFE', ['ngRoute', 'ngResource', 'ui.bootstrap', 'angularFileUpload']);

// Intercept server sent errors, potentially rejecting auth errors
function AuthInjector($rootScope, $q, $location, Session) {
  return {

    // called on server error
    responseError : function (response) {

      // if the server sends back a 403 "Not Authorized",
      // and the code is ERR_NO_SESSION, we have had a session timeout
      // on the server.  Redirect to login
      if (response.status === 403 && response.data.code === "ERR_NO_SESSION") {
        console.log('[AUTH] No session found!');
        Session.destroy();
        $location.url('/login');
      }

      return $q.reject(response);
    }
  };
}

// ensure that the user is properly connected
app.factory('AuthenticationInjectorFactory', ['$rootScope', '$q', '$location', 'Session', AuthInjector]);

// configure routes
function configRoutes($routeProvider) {
  $routeProvider
  .when('/', {
    controller : 'MainController as MainCtrl',
    templateUrl : 'modules/main/main.html'
  })
  .when('/login', {
    controller : 'LoginController as LoginCtrl',
    templateUrl : 'modules/login/login.html'
  })
  .when('/dashboard', {
    controller : 'DashboardController as DashboardCtrl',
    templateUrl : 'modules/dashboard/dashboard.html'
  })
  .when('/create', {
    controller : 'RequestController as RequestCtrl',
    templateUrl : 'modules/requests/create.html'
  })
  .when('/requests/:id', {
    controller : 'ReceiptController as ReceiptCtrl',
    templateUrl : 'modules/requests/receipt.html'
  })
  .when('/users/:id?', {
    controller : 'UserController as UserCtrl',
    templateUrl : 'modules/users/users.html'
  })
  .when('/users/:id/preferences', {
    controller : 'PreferencesController as PreferencesCtrl',
    templateUrl : 'modules/users/preferences.html'
  })
  .when('/users/account/recovery', {
    controller  : 'RecoveryController as RecoveryCtrl',
    templateUrl : 'modules/users/recovery/recovery.html'
  })
  .when('/projects', {
    controller  : 'ProjectController as ProjectCtrl',
    templateUrl : 'modules/projects/project.html'
  })
  .otherwise('/');
}

function configAuth($httpProvider) {
  $httpProvider.interceptors.push(['$injector', function ($injector) {
    return $injector.get('AuthenticationInjectorFactory');
  }
]);

}

function run($rootScope, $location, Session) {

  function contains(array, value) { return array.indexOf(value) !== -1; }

  // make sure that the user is authenticated
  $rootScope.$on('$routeChangeStart', function (event, next) {
    var publicRoutes = ['/users/account/recovery', '/users/account/reset', '/login'],
        route = next.originalPath;

    // NOTE - cannot have a user with id === 0
    if (!Session.id && !contains(publicRoutes, route)) {
      console.log('Redirecting to public /login', route);
      $location.url('/login');
    }

    if (!!Session.id && route === '/login') {
      console.log('Blocking attempt at accessing login page.');
      $location.url('/');
    }
  });
}

// configure and run
app.config(['$httpProvider', configAuth]);
app.config(['$routeProvider', configRoutes]);
app.run(['$rootScope', '$location', 'Session', run]);

angular.module('AFE')
.service('ProjectService', ['$resource', ProjectService]);

// controls CRUD on projects
function ProjectService($resource) {
  var vm = this;

  // the REST datasource
  vm.datasource = $resource('/projects/:id', { id : '@id' }, { 'update' : { 'method' : 'PUT' }});
  vm.load = load;

  // get a new form
  vm.new = function () { return new vm.datasource(); };

  // CRUD operatins
  vm.add = add;
  vm.remove = remove;
  vm.edit = edit;
  vm.get = get;

  /* ------------------------------------------------------------------------ */

  // refresh the dataset
  function load() {
    vm.projects = vm.datasource.query();
    return vm.projects;
  }

  // add a new project, updating the project collection
  // when the function completes
  function add(project) {
    return project.$save(function (data) {

      // push the new project onto the stack
      vm.projects.push(data);
    });
  }

  // fetch a single project
  function get(id) {
    return vm.datasource.get({ id : id });
  }

  // edit an existing project
  function edit(project) {
    return project.$update(project);
  }

  // DELETE a project on the server and remove
  // the project reference from the projects array
  function remove(project) {
    return project.$remove(function () {
      var idx = vm.projects.indexOf(project);
      vm.projects.splice(idx, 1);
    });
  }

  return vm;
}

angular.module('AFE')
.service('Session', ['$window', SessionService]);

// Managing a session like this is an elegant way to
// ensure a session exists
function SessionService($window) {
  var vm = this;

  // session persist in the browser's session storage
  var storage = $window.sessionStorage,
      key = 'afe-storage';

  // create a new session
  vm.create       = function (data) {
    vm.id         = data.id;
    vm.role       = data.role;
    vm.email      = data.email;
    vm.lastactive = new Date(data.lastactive);
    vm.username   = data.username;
    storage.setItem(key, JSON.stringify(data));
  };

  // destroy the current session
  vm.destroy      = function () {
    vm.id         = null;
    vm.role       = null;
    vm.email      = null;
    vm.lastactive = null;
    vm.username   = null;
    storage.setItem(key, '{}');
  };

  // loads a session from memory
  vm.load = function () {
    try {
      var payload = JSON.parse(storage.getItem(key));
      if (!payload) { return; }
      else { vm.create(payload); }
    } catch (e) {}
  };

  // load an old session if it exists
  vm.load();
}

angular.module('AFE')
.service('UserService', ['$resource', UserService]);

function UserService($resource) {
  var vm = this;

  // REST interface
  vm.datasource = $resource('/users/:id', { id : '@id' }, { 'update' : { 'method' : 'PUT' }});
  vm.load = load;
  vm.init = init;
  vm.create = create;
  vm.update = update;
  vm.remove = remove;
  vm.get = get;

  /* ------------------------------------------------------------------------ */

  // populate the users array
  function load() {
    vm.users = vm.datasource.query();
    return vm.users;
  }

  // fetch a single user by id;
  function get(id) {
    return vm.datasource.get({ id : id });
  }

  // create a new user $resource object
  function init() {
    return new vm.datasource();
  }

  // saves a user $resource object
  function create(user) {
    user.$save(function (data) {
      vm.users.push(user);
    });
  }

  // updates a user $resource object
  function update(user) {
    return user.$update(user);
  }

  // DELETE a user on the server and remove
  // the reference from the users array
  function remove(user) {
    return user.$remove(function () {
      var idx = vm.users.indexOf(user);
      vm.users.splice(idx, 1);
    });
  }
}

(function () {

  'use strict';

  var app = angular.module('AFE');


  app.service('DashboardService', ['$http', function ($http) {

    // get the projects
    this.getProjects = function () {
      return $http.get('/projects');
    };

    // get all PRFs
    this.getRequests = function () {
      return $http.get('/requests');
    };

    // get a specific PRF by it's ID
    this.getRequestById = function (id) {
      return $http.get('/request/' + id);
    };

    // this is a server-sent events stream
    this.getRequestStream = function () {
      // SSE
    };

  }]);

  app.controller('DashboardController', ['DashboardService', '$interval', function (dashService) {

  }]);

})();

angular.module('AFE')
.factory('AuthService', ['$http', 'Session', AuthService])
.controller('LoginController', ['$location', 'AuthService', LoginController]);

function AuthService($http, Session) {
  var service = {};

  // log the user in
  service.login = function (credentials) {
    return $http
      .post('/login', { username : credentials.username, password : credentials.password })
      .then(function (res) {
        Session.create(res.data);
        return res.data;
      });
  };

  // log the user out
  service.logout = function () {
    Session.destroy();
    return $http.get('/logout');
  };

  return service;
}


function LoginController($location, AuthService) {
  var vm = this;

  vm.credentials = {};
  vm.error = false;

  vm.login = function (credentials) {
    vm.error = false;
    AuthService.login(credentials)
    .then(function () {
      $location.url('/');
    })
    .catch(function () {
      vm.error = true;
    });
  };
}

angular.module('AFE')
.controller('MainController', ['Session', MainController]);

function MainController(Session) {
  var vm = this;

  // bind data to view
  vm.user = Session;
  vm.getGreeting = getGreeting;

  var timestamp = new Date(),
      noon = getNoon();

  // get a time at 12 o'clock
  function getNoon() {
    var today = new Date();
    today.setHours(12, 0, 0, 0);
    return today;
  }

  // determin how to greet the user
  function getGreeting() {
    var greeting,
        difference = timestamp.getHours() - noon.getHours();

    // morning
    if (difference < 0) {
      greeting = "Good Morning";
    } else if (difference > 6) {
      greeting = "Good Evening";
    } else {
      greeting = "Good Afternoon";
    }

    return greeting;
  }
}

angular.module('AFE')

.controller('NavigationController', ['AuthService', 'Session', '$location', function (AuthService, Session, $location) {
  this.isLoggedIn = function () {
    return Session.id;
  };

  this.user = Session;

  this.logout = function () {
    console.log('clicked logout');
    AuthService.logout()
    .then(function () {
      $location.url('/login');
    });
  };
}]);

angular.module('AFE')
.service('ColorService', ['$resource', ColorService])
.controller('ProjectController', ['$window', 'ProjectService', 'ColorService', ProjectController]);

// Loads available colors for projects
function ColorService($resource) {
  var vm = this;

  vm.datasource = $resource('/colors/:id');
  vm.load = load;

  // refresh the dataset
  function load() {
    vm.colors = vm.datasource.query();
    return vm.colors;
  }

  return vm;
}


// View-Model for the project page.
function ProjectController($window, ProjectService, ColorService) {
  var vm = this;

  // Load the projects data
  ProjectService.load();

  // manage tab states
  vm.states = { 'overview' : true, 'add' : false, 'edit' : false };
  vm.goTo = goTo;

  // bind the datasets
  vm.projects = ProjectService.load();
  vm.colors = ColorService.load();

  // utility functions
  vm.print = function () { $window.print(); };
  vm.download = angular.noop;
  vm.selectColor = selectColor;
  vm.refresh = ProjectService.load;

  // edit/add/remove projects
  vm.initAdd = initAdd;
  vm.saveAdd = saveAdd;
  vm.initEdit = initEdit;
  vm.saveEdit = saveEdit;
  vm.removeProject = removeProject;

  /* ------------------------------------------------------------------------ */

  // navigate to tab by id, setting it as active
  function goTo(state) {
    for (var s in vm.states) { vm.states[s] = false; }
    vm.states[state] = true;
  }

  // select a color for the slave project
  function selectColor(project, color) {
    project.colorname = color.name;
    project.color = color.code;
  }

  // initialize the add form
  function initAdd() {
    vm.slave = new ProjectService.datasource();
    vm.goTo('add');
  }

  // save the new form
  function saveAdd(invalid, project) {
    if (invalid) { return; }
    ProjectService.add(project)
    .then(function () {
      vm.goTo('overview');
    });
  }

  // initialize project editing
  function initEdit(project) {

    // go to the editting mode on this project
    vm.slave = project;

    // get the color name
    vm.colors.forEach(function (color) {
      if (project.color === color.code) {
        project.colorname = color.name;
      }
    });

    // go to the editting tab
    vm.goTo('edit');
  }

  // save the editted project
  function saveEdit(invalid, project) {
    if (invalid) { return; }
    ProjectService.edit(project)
    .then(function () {
      vm.goTo('overview');
    });
  }

  // delete a project
  function removeProject(project) {
    ProjectService.remove(project);
  }
}

angular.module('AFE')
.service('AFEService', ['$resource', 'Session', AFEService]);

function AFEService($resource, Session) {
  var vm = this,
      isDef = angular.isDefined;

  vm.datasource = $resource('/requests/:id');
  vm.load = load;
  vm.record = record;
  vm.total = total;
  vm.create = create;
  vm.valid = valid;
  vm.get = get;

  /* ----------------------------------------------------------------------- */

  // create a new record, with details and attachments
  function record() {
    var slave = new vm.datasource();
    slave.date = new Date();
    slave.details = [{}];
    slave.attachments = [];
    slave.userid = Session.id;
    return slave;
  }

  // validate that a record is properly formatted
  function valid(record) {
    var invalid, properties;

    // required properties for the record
    properties = ['item', 'budgetcode', 'unit', 'unitprice'];

    // the record must have at least one row
    if (record.details.length < 1) { invalid = true; }

    // loop through the record details, and assert that all required properties
    // are defined on the model.
    record.details.forEach(function (row) {
      var correct = properties.every(function (prop) {
        var value = row[prop];
        return isDef(value) && value !== "" && value !== null;
      });

      // set the $error property if not all properties present
      row.$error = !correct;

      // toggle global error if even one row is not correct
      if (!correct) { invalid = true;}
    });

    return !invalid;
  }

  function create(slave) {
    return slave.$save();
  }

  // total the amound in the record field
  function total(record) {
    return record.details.reduce(function (total, row) {
      if (!row.quantity || !row.unitprice) { return total; }
      return total + (row.quantity * row.unitprice);
    }, 0);
  }

  // refresh the dataset
  function load() {
    vm.requests = vm.datasource.query();
    return vm.requests;
  }

  function get(id) {
    return vm.datasource.get({ id : id });
  }

  return vm;
}

angular.module('AFE')
.service('AttachmentService', ['FileUploader', AttachmentService]);

function AttachmentService(FileUploader) {

  var uploader = new FileUploader({
    url        : '/upload',
    alias      : 'attachment',
    autoUpload : true,
    queueLimit : 5
  });

  uploader.onErrorItem = function(fileItem, response, status, headers) {
    console.info('onErrorItem', fileItem, response, status, headers);
  };
  uploader.onCompleteAll = function() {
    console.info('onCompleteAll');
  };

  return uploader;
}

angular.module('AFE')
.controller('RequestController', ['$scope', '$location', 'AFEService', 'ProjectService', 'Session', 'AttachmentService', RequestController]);

function RequestController($scope, $location, AFEService, ProjectService, Session, AttachmentService) {
  var vm = this;

  // load the project data
  ProjectService.load();

  // bind service data
  vm.user = Session;
  vm.requests = AFEService.requests;
  vm.projects = ProjectService.projects;
  vm.uploader = AttachmentService;

  // creation
  vm.slave = AFEService.record();
  vm.total = 0;
  vm.retotal = function () { vm.total = AFEService.total(vm.slave); };

  // form mechanics
  vm.submit = submit;
  vm.assignProjectId = assignProjectId;
  vm.addRow = addRow;
  vm.removeRow = removeRow;
  vm.attachment = attachment;

  // assign temp data
  vm.noop = angular.noop; // FIXME/TODO

  /* ----------------------------------------------------------------------- */


  // assign the projectId
  function assignProjectId(project) {
    vm.slave.projectid = project.id;
    vm.slave.project = project;
  }

  // submits the form to the server, after validation checks
  function submit(invalid, slave) {

    // detect errors on detail rows (set the $error property)
    if (!AFEService.valid(slave)) {
      slave.$invalid = true;
      return;
    } else {
      slave.$invalid = false;
    }

    // reject outright if the form controller finds an error
    if (invalid) { return; }

    // if we got past the first two checks, we are able to submit
    // to the server.
    AFEService.create(slave)
    .then(function (record) {

      // reset the form to a prestine state (for validation)
      $scope.RequestForm.$setPristine();

      // set up a new record
      vm.slave = AFEService.record();

      // assign the newly posted record here
      vm.posted = record;
    });
  }

  // adds a row to the requestdetail line
  function addRow() {
    vm.slave.details.push({});
  }

  // removes the row at idx from the requestdetails table
  function removeRow(idx) {
    vm.slave.details.splice(idx, 1);
  }

  // allow a user to attach a file
  function attachment() {
    var id = 1;
    vm.slave.attachments.push(id);
  }
}

angular.module('AFE')
.controller('ReceiptController', ['$http', '$routeParams', '$location', ReceiptController]);

function ReceiptController($http, $routeParams, $location) {
  var vm =  this;

  vm.id = $routeParams.id;
  vm.print = function () { window.print(); };
  vm.link = $location.absUrl();

  // TODO
  // make this a $resource
  // load the user by id
  // load the project by name

  // load the correct request for display
  $http.get('/requests/' + vm.id)
  .then(function (response) {

    // the response has at least one row.  We can retrieve the metadata
    // from the first row and then display the details in the second.
    vm.meta = response.data[0];
    vm.data = response.data;

    vm.totals = response.data.reduce(function (agg, row) {
      agg.items += row.quantity;
      agg.prices += (row.quantity * row.unitprice);
      return agg;
    }, { items : 0, prices : 0 });

  })
  .catch(function (err) {
    console.error(err);
  });
}

angular.module('AFE')
.service('TemplateService', [TemplateService]);


function TemplateService() {
  // TODO
}

angular.module('AFE')
.controller('UserController', ['$routeParams', 'UserService', 'Session', UserController]);

function UserController($routeParams, UserService, Session) {
  var vm = this;

  // make sure that the user is authorized to view all users
  // if not 'admin', the user should only be able to see their own
  // role
  var authorized = $routeParams.id === Session.id || Session.role === 'admin';
  if (!authorized) {
    vm.unauthorized = true;
    return;
  }

  vm.users = UserService.load();

  console.log(vm.users);
}

angular.module('AFE')

/* UserProfileController
 *
 * This controler is responsible for updating the user's
 * profile information.  A user profile contains a cached
 * copy of user preferences.
 *
 */
.controller('UserProfileController', ['$http', '$routeParams', function ($http, $routeParams) {
  var self = this,
    userId = $routeParams.userid;

  // load up the user 
  $http.get('/users/' + id)
  .then(function (response) {
    self.user = response.data; 
  })
  .catch(function (error) {
    console.error(error);
  });

}]);


angular.module('AFE')
.controller('RecoveryController', ['$http', function ($http) {

  // alias this
  var self = this;

  self.error = false;
  self.success = false;
  
  // submit to the server
  self.submit = function () {
    self.success = false;
    self.error = false;

    $http.post('/users/accountrecovery', { email : self.email })
    .then(function () {
      self.success = true;
    })
    .catch(function () {
      self.error = true;
    });
  };

}]);

